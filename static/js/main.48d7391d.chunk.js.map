{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","update","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","newitems","filteredItems","filter","placeholder","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTA2CeA,MAtCf,SAAkBC,GACd,IACMC,EADQD,EAAME,MACIC,KACpB,SAAAC,GACI,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OACZC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAEI,SAACC,GAEGZ,EAAMa,OAAOD,EAAEE,OAAOL,MAAML,EAAKE,QAI7C,8BACG,kBAAC,IAAD,CACAS,QAEK,kBAAMf,EAAMgB,WAAWZ,EAAKE,MAEjCD,UAAU,OAAOY,KAAK,gBAMrC,OACI,6BACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC/BlB,K,eC9BbmB,IAAQC,IAAIC,K,IAqGGC,E,kDAjGb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAWRwB,YAAc,SAACZ,GAEb,EAAKa,SACH,CACEC,YACA,CACEhB,KAAKE,EAAEE,OAAOL,MACdH,IAAIqB,KAAKC,UAnBE,EAyBnBC,QAAU,SAACjB,GAETA,EAAEkB,iBACF,IAAMC,EAAQ,EAAKC,MAAMN,YACzB,GAAkB,KAAfK,EAAQrB,KACX,CAEE,IAAMuB,EAAS,GAAD,mBAAK,EAAKD,MAAM9B,OAAhB,CAAsB6B,IACpC,EAAKN,SACH,CACEvB,MAAM+B,EACNP,YACA,CACEhB,KAAK,GACLJ,IAAI,QAvCK,EA8CnBU,WAAa,SAAAV,GAET,IAAM4B,EAAgB,EAAKF,MAAM9B,MAAMiC,QACrC,SAAA/B,GAAI,OAAEA,EAAKE,MAAMA,KAGnB,EAAKmB,SACH,CACGvB,MAAMgC,KAtDI,EA2DnBrB,OAAS,SAACJ,EAAMH,GAEd,IAAMJ,EAAM,EAAK8B,MAAM9B,MACvBA,EAAMC,KACA,SAAAC,GACKA,EAAKE,MAAMA,IACdF,EAAKM,KAAKD,MAGlB,EAAKgB,SACH,CACEvB,MAAMA,KAnEV,EAAK8B,MAAQ,CACV9B,MAAM,GACNwB,YAAY,CACVhB,KAAK,GACLJ,IAAI,KAPQ,E,qDA6EjB,OACC,yBAAKD,UAAU,OACZ,gCACA,0BAAMG,GAAG,SACP,2BAAOD,KAAK,OAAO6B,YAAY,kBAC/B3B,MAAO4B,KAAKL,MAAMN,YAAYhB,KAC9BC,SAAU0B,KAAKb,cACf,4BAAQT,QAASsB,KAAKR,SAAtB,SAGJ,kBAAC,EAAD,CAAU3B,MAAOmC,KAAKL,MAAM9B,MAC5Bc,WAAYqB,KAAKrB,WACjBH,OAAQwB,KAAKxB,c,GA3FDyB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48d7391d.chunk.js","sourcesContent":["import React from 'react'\nimport \"./ListItem.css\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move'\n\nfunction ListItem(props) {\n    const items = props.items;\n    const listItems = items.map(\n        item => {\n            return <div className=\"list\" key={item.key}>\n                <p>\n                    <input type=\"text\"\n                    id={item.key}\n                    value={item.text}\n                    onChange=\n                    {\n                        (e)=>\n                        {\n                            props.update(e.target.value,item.key)\n                        }\n                    }\n                    />\n                <span>\n                   <FontAwesomeIcon \n                   onClick = \n                   {\n                        () => props.deleteItem(item.key)\n                   }\n                   className=\"icon\" icon=\"trash\"/>\n               </span></p>\n              \n                </div>\n        }\n    )\n    return (\n        <div>\n            <FlipMove duration={500} easing=\"ease-in-out\">\n            {listItems}\n            </FlipMove>\n            </div>\n    )\n}\n\nexport default ListItem\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\n\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash)\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       items:[],\n       currentItem:{\n         text:'',\n         key:''\n       }\n    }\n  }\n\n  handleInput = (e)=>\n  {\n    this.setState(\n      {\n        currentItem:\n        {\n          text:e.target.value,\n          key:Date.now()\n        }\n      }\n    )\n  }\n  \n  addItem = (e) =>\n  {\n    e.preventDefault();\n    const newItem=this.state.currentItem;\n    if(newItem.text!==\"\")\n    {\n      //add to list\n      const newitems=[...this.state.items,newItem];\n      this.setState(\n        {\n          items:newitems,\n          currentItem:\n          {\n            text:\"\",\n            key:\"\"\n          }\n        }\n      )\n    }\n  }\n\n  deleteItem = key =>\n  {\n      const filteredItems = this.state.items.filter(\n        item=>item.key!==key\n      )\n\n      this.setState(\n        {\n           items:filteredItems\n        }\n      )\n  }\n\n  update = (value,key) =>\n  {\n    const items=this.state.items;\n    items.map(\n          item => {\n            if(item.key===key)\n            item.text=value\n          }\n        )\n    this.setState(\n      {\n        items:items\n      }\n    )\n    \n  }\n\n  render() {\n    return (\n     <div className=\"app\">\n        <header>\n        <form id=\"to-do\">\n          <input type=\"text\" placeholder=\"Enter your task\"\n          value={this.state.currentItem.text}\n          onChange={this.handleInput}></input>\n          <button onClick={this.addItem}>Add</button>\n        </form>\n      </header>\n      <ListItem items={this.state.items}\n      deleteItem={this.deleteItem}\n      update={this.update}/>\n     </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}